pry-doc:
  commands: [ 'enhanced ?', 'enhanced $' ]
  desc: >-
    Allows you to look into the Ruby builtin classes with the ? and $ commands.
  use cases:
    - '? [].pop'
    - '$ [].pop'
    - …etc.
  url: j

pry-debugger:
  commands: [ break, breakpoints, next, step, finish, continue ]
  desc: >-
    An essential gem. Turns Pry into a steppable debugger.
  use cases:
    - Making the basic "require'pry';binding.pry" from a script come alive.
    - In conjunction with plymouth or pry-rescue, to explore failing tests.
    - Following calls into other libs.
  url: https://github.com/banister/pry-debugger#readme

pry-stack_explorer:
  commands: [ show-stack, up, down, frame ]
  use cases:
    - So many. TODO = document some.
  desc: Allows you to navigate the call stack.
  url: https://github.com/pry/pry-stack_explorer#readme

pry-exception_explorer:
  commands: [ enter-exception, continue-exception, exit-exception ]
  desc: >-
    Somewhat of a competitor to pry-rescue, but implemented differently.
    Currently doesn't work on C exceptions (such as `1/0` errors).
  use cases:
    - Let an exception happen in the REPL, then use enter-exception to find it.
    - Inline-style trap
    - Block wrapper-style trap
    - http://vimeo.com/36061298 ← "mini screencast"
  url: https://github.com/pry/pry-exception_explorer#readme

plymouth:
  desc: >-
    Capture test failures into Pry sessions. This might get overtaken by the
    pry-rescue approach.
  use cases:
    - Tightening the red/green/refactor loop.
  url: https://github.com/banister/plymouth#readme

pry-rescue:
  commands: [ try-again, cd-cause ]
  desc: Provides `Pry.rescue do … end` to capture any exceptions and start pry
    from the context of the source of the exception.
  use cases:
    - Shortens write-run-debug cycles when exceptions are involved.
    - Specifically, RSpec integration. https://github.com/exad/zu/blob/master/spec/spec_helper.rb#L15
    - Exploring causes of hard-to-replicate exceptions.
  url: https://github.com/ConradIrwin/pry-rescue#readme

jist:
  commands: [ jist, 'enhanced gist' ]
  desc: Replacement for the undermaintained `gist` gem.
  use cases:
    - Improved implementation for Pry's `gist` command.
    - Check out the `jist -h` output on the CLI, by the way.
  url: https://github.com/ConradIrwin/jist#readme
